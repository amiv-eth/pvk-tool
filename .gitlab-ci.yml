stages:
  - test
  - build
  - deploy

frontend_eslint:
  stage: test
  image: node:latest
  before_script:
    - cd ./Frontend
    - npm install
    - cd ..

  when: always
  script:
    - cd ./Frontend
    - npm run lint
    - cd ..

frontend_build_master:
  stage: build
  
  image: docker:latest
  services:
    - docker:dind
  
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE_FRONTEND" ./Frontend/
    - docker push "$CI_REGISTRY_IMAGE_FRONTEND"
  
  only:
    - master

frontend_build:
  stage: build

  image: docker:latest
  services:
    - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG" ./Frontend/
    - docker push "$CI_REGISTRY_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG"
  
  except:
    - master

frontend_deploy:
  stage: deploy

  image: amiveth/service-update-helper

  script:
    - export CI_DEPLOY_SERVICE="$CI_DEPLOY_SERVICE_FRONTEND"
    - /update.py

  only:
    - master

backend_tests:
  stage: test
  image: python:alpine
  services:
    - name: bitnami/mongodb:latest
      alias: mongo

  variables:
    MONGO_HOST: mongo
    MONGODB_DATABASE: pvk_test
    MONGODB_USERNAME: pvk_user
    MONGODB_PASSWORD: pvk_pass

  before_script:
    - pip install tox
  script:
    - cd ./Backend
    - tox
    - cd ..

backend_build_master:
  stage: build
  
  image: docker:latest
  services:
    - docker:dind
  
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE_BACKEND" ./Backend/
    - docker push "$CI_REGISTRY_IMAGE_BACKEND"
  
  only:
    - master

backend_build:
  stage: build

  image: docker:latest
  services:
    - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG" ./Backend/
    - docker push "$CI_REGISTRY_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG"
  
  except:
    - master

backend_deploy:
  stage: deploy

  image: amiveth/service-update-helper

  script:
    - export CI_DEPLOY_SERVICE="$CI_DEPLOY_SERVICE_BACKEND"
    - /update.py

  only:
    - master
